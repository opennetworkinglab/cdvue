/*
 * Copyright 2015-present Open Networking Laboratory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.thoughtworks.qdox.model.JavaAnnotation;
import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaField;
import org.json.simple.JSONObject;

import java.util.List;

/**
 * Test class to use to inspect the specific JSONObject's generated by the DependencyParser class.
 *
 * @author Parth Pendurkar
 * @version 1.0
 */
public class JSONInspector {

    /**
     * Prints out some info about the given JSONObject to the console.
     *
     * @param jsonObject        the given JSONObject
     */
    public void toString(JSONObject jsonObject) {
        String className = (String) jsonObject.get("cn"); //gets the associated JavaClass's fully qualified name to get other values

        boolean hCA = (boolean) jsonObject.get("hc"); //whether the class has an @Component annotation
        boolean hSA = (boolean) jsonObject.get("hs"); //whether the class has an @Service annotation
        boolean iI = (boolean) jsonObject.get("ii"); //whether or not the JavaClass is an interface or not
        List<JavaAnnotation> jca = (List) jsonObject.get("ca"); //all JavaAnnotations for the class
        List<JavaField> jfa = (List) jsonObject.get("rf"); //all JavaField's from this class that contain an @Reference annotation
        List<JavaClass> jic = (List) jsonObject.get("ic"); //all JavaClass's that the class implements
        String sT = (String) jsonObject.get("st"); //if the JavaClass has an @Service tag and has a property on that tag, this will not be empty
        //TODO: Make sT actually show up in the console

        System.out.println("JSON toString for " + className + ".");
        System.out.println("");

        //prints out the parsed info
        System.out.println(className + " has service annotations: " + hSA);
        System.out.println(className + " has component annotations: " + hCA);
        System.out.println(className + " is an interface: " + iI);

        if (!jca.isEmpty())
            System.out.println(className + " has " + jca.size() + " class annotations recovered from the JSON.");
        if (!jfa.isEmpty())
            System.out.println(className + " has " + jfa.size() + " fields with reference annotations recovered from the JSON.");
        if (!jic.isEmpty()) {
            System.out.println(className + " implements all of the classes below");
            jic.forEach(jc -> System.out.println("-" + jc.getName()));
        }

        System.out.println("");
        System.out.println("JSON toString for " + className + " completed.");
    }
}