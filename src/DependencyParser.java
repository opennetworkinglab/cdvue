/**
 * Created by parthpendurkar on 6/20/16.
 */

import com.sun.xml.internal.ws.api.message.ExceptionHasMessage;
import com.sun.xml.internal.ws.api.message.Packet;
import com.thoughtworks.qdox.*;
import com.thoughtworks.qdox.model.JavaAnnotation;
import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaField;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;

public class DependencyParser
{
    private static final String COMPONENT = "org.apache.felix.scr.annotations.Component";
    private static final String SERVICE = "org.apache.felix.scr.annotations.Service";
    private static final String REFERENCE = "org.apache.felix.scr.annotations.Reference";
    private static final String PROPERTY = "org.apache.felix.scr.annotations.Property";
    private String path;

    public DependencyParser(String path)
    {
        this.path = path;
    }

    public void execute() throws ExecutionException
    {
        try
        {
            JavaProjectBuilder builder = new JavaProjectBuilder();
            builder.addSourceTree(new File(path));
            builder.getClasses().forEach(this::processClass);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            throw e;
        }
    }

    private void processClass(JavaClass javaClass)
    {
        boolean isComponent = javaClass.getAnnotations().stream()
                .map(ja -> ja.getType().getName().equals(COMPONENT))
                .findFirst().isPresent();

        if (isComponent) {
            List<String> lines = new ArrayList<>();
            javaClass.getFields().forEach(field -> processField(lines, javaClass, field));
            if (!lines.isEmpty())
            {
                writeCatalog(javaClass, lines);
            }
        }
    }

    private void processField(List<String> lines, JavaClass javaClass, JavaField field)
    {
        field.getAnnotations().forEach(ja -> {
            if (ja.getType().getName().equals(PROPERTY)) {
                lines.add(expand(javaClass, ja.getNamedParameter("name").toString()) +
                        SEP + type(field) +
                        SEP + defaultValue(javaClass, field, ja) +
                        SEP + description(ja));
            }
        });
    }

    private void writeCatalog(JavaClass javaClass, List<String> lines) {
        File dir = new File(path, javaClass.getPackageName().replace('.', '/'));
        dir.mkdirs();

        File cfgDef = new File(dir, javaClass.getName().replace('.', '/') + ".cfgdef");
        try (FileWriter fw = new FileWriter(cfgDef);
             PrintWriter pw = new PrintWriter(fw)) {
            pw.println("# This file is auto-generated by Dependency Mapper");
            lines.forEach(pw::println);
        } catch (IOException e) {
            System.err.println("Unable to write catalog for " + javaClass.getName());
            e.printStackTrace();
        }
    }


}
